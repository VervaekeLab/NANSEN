function [M, ref, ncShifts, ncOpts] = nonrigid(Y, ref, optsFlag)
%nonrigid Wrapper for running nonrigid NoRMCorre with default settings.
%   M = nonrigid(Y, ref) returns motion corrected images M, given 
%   uncorrected images Y. ref is optional and will be calculated if it is
%   not provided.
%
%   [M, ref, ncShifts, ncOpts] = nonrigid(Y, ref) also returns reference,
%   shifts and options used for motion correction.


if nargin < 2; ref = []; end
if nargin < 3; optsFlag = 'standard'; end

warning('off', 'MATLAB:mir_warning_maybe_uninitialized_temporary')

if ~isa(Y, 'single') ||  ~isa(Y, 'double') 
    Y = single(Y);
    ref = single(ref);
end

[sz1, sz2, ~] = size(Y);

% Set options for nonrigid aligning.
switch optsFlag
    
    case {'standard', 'default'}
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', [sz1/4, sz1], 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 40, 'max_dev', 15, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', false, ...
                   'boundary', 0, 'print_msg', 0, 'iter', 1, ...
                   'shifts_method', 'cubic');
    case 'fft'
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', [128, 128], 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 40, 'max_dev', 15, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', false, ...
                   'boundary', 0, 'print_msg', 0, 'iter', 1, ...
                   'shifts_method', 'fft');               
               
    case 'smallgrid'
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', [64, 64], 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 40, 'max_dev', 15, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', false, ...
                   'boundary', 0, 'print_msg', 0, 'iter', 1, ...
                   'shifts_method', 'cubic');
               
    case 'finetune'
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', [128, 128], 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 1, 'max_dev', 5, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', false, ...
                   'boundary', 0, 'print_msg', 0, 'iter', 1, ...
                   'shifts_method', 'cubic');
               
   case 'finetune2'
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', [64, 64], 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 1, 'max_dev', 5, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', false, ...
                   'boundary', 0, 'print_msg', 0, 'iter', 1, ...
                   'shifts_method', 'cubic');
               
    case '2x1'
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', floor([sz1/2, sz1]), 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 50, 'max_dev', 20, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', true, ...
                   'boundary', 'copy', 'print_msg', 0, 'iter', 1, ...
                   'shifts_method', 'fft');
               
    case '4x1'
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', floor([sz1/4, sz1]), 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 50, 'max_dev', 20, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', true, ...
                   'boundary', 'copy', 'print_msg', 0, 'iter', 1, ...
                   'shifts_method', 'fft');
    case '4x2'
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', floor([sz1/4, sz1/2]), 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 60, 'max_dev', 30, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', false, ...
                   'boundary', 'copy', 'print_msg', 0, 'iter', 1, ...
                   'shifts_method', 'fft');
   
    case '8x2'
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', round([sz1/8, sz1/2]), 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 50, 'max_dev', 20, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', true, ...
                   'boundary', 'copy', 'print_msg', 0, 'iter', 1, ...
                   'shifts_method', 'fft');
               
    case '8x1'
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', round([sz1/8, sz2]), 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 50, 'max_dev', 30, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', false, ...
                   'boundary', 'copy', 'print_msg', 1, 'iter', 1, ...
                   'shifts_method', 'fft');
               
   case '8x1b' % Update template, cubic shifts, no message printing...
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', round([sz1/8, sz2]), 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 70, 'max_dev', 30, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', true, ...
                   'boundary', 'copy', 'print_msg', 0, 'iter', 1, ...
                   'shifts_method', 'cubic');
               
    case '8x1c' % Dont update template, cubic shifts, no message printing...
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', round([sz1/8, sz2]), 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 70, 'max_dev', 30, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', false, ...
                   'boundary', 'copy', 'print_msg', 0, 'iter', 1, ...
                   'shifts_method', 'fft');
   
    case '8x1d' % Update template,
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', round([sz1/8, sz2]), 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 50, 'max_dev', 30, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', true, ...
                   'boundary', 'copy', 'print_msg', 0, 'iter', 1, ...
                   'shifts_method', 'fft');
    case '32x1'
        ncOpts = NoRMCorreSetParms('d1', sz1, 'd2', sz2,...
                   'grid_size', round([sz1/32, sz2]), 'mot_uf', 4, 'bin_width', 50,...
                   'max_shift', 50, 'max_dev', 30, 'us_fac', 50, ...
                   'correct_bidir', 0, 'upd_template', false, ...
                   'boundary', 'copy', 'print_msg', 1, 'iter', 1, ...
                   'shifts_method', 'fft');
end

               
if size(Y, 3) == 1
    [M, ncShifts, ref] = normcorre(Y, ncOpts, ref);
else
    if exist('normcorre_batch', 'file') && ~strcmp(ncOpts.shifts_method, 'fft')
        [M, ncShifts, ref] = normcorre_batch(Y, ncOpts, ref);
    else
        [M, ncShifts, ref] = normcorre_batch(Y, ncOpts, ref);
    end
end

M = cast(M, 'like', Y);

if nargout == 3
    clear ncOpts
elseif nargout == 2
    clear ncShifts ncOpts
elseif nargout == 1
    clear ref ncShifts ncOpts
end

warning('on', 'MATLAB:mir_warning_maybe_uninitialized_temporary')

end