classdef DataMethod < nansen.mixin.HasOptions & nansen.processing.mixin.HasSubSteps %nansen.dataio.DataIoModel & 
%DataMethod Abstract class to use as a base class for a data method
%
%   This is a base class for many of the methods in Nansen. A class that
%   inherits from the DataMethod will have the following features:
%
%   An options manager to manage option sets for the method, and let
%   users interactively (in gui) define and save custom option sets.
%
%   Logging of information about processing steps
%
%   Access to loadData and saveData methods that can be used to load and
%   save intermediate or final results to and from files.
%
%   Subclasses must implement the following constant properties
%       MethodName      % Name of method
%       IsManual        % Does method require manual supervision
%       IsQueueable     % Is method suitable for queueing. Examples where not: method creates figures or requires manual input
%       VARIABLE_PREFIX : A prefix to add to autogenerated variable names
%       DATA_SUBFOLDER : Name of subfolder(s) where to save results by default
%



    % TODO:
    % [ ] Make property to determine what should be done if a method is
    %     already completed. I.e rerun and overwrite, rerun and save to new
    %     folder, or do nothing...
    %
    % [ ] Implement option to turn on/off saving of secondary results.
    % [ ] Related: Implement DataIOModel for filepaths. See saveData/loadData 
    %
    % [ ] Implement printStatus method. Create a special class for method
    %     logging?
    %
    % [ ] Remove the Parameters property?
    %
    %   Add internal list for steps if methods has multiple steps...
    
   
    properties (Constant, Abstract)
        MethodName      % Name of method
        IsManual        % Does method require manual supervision
        IsQueueable     % Is method suitable for queueing. Examples where not: method creates figures or requires manual input
    end
    
    properties (Abstract, Constant, Hidden)
        DATA_SUBFOLDER  % Name of subfolder(s) where to save results by default
        VARIABLE_PREFIX % Prefix for autogenerated variable names (typically name of method which would pass the isvarname() function)
    end
    
    properties
        RedoIfCompleted = false % Run method again if results already exist from before? i.e force redo
    end
    
    properties (Access = protected)
        DataIoModel
        Parameters % Todo: Resolve: Same as options...
    end
    
    properties (Dependent)
        DataId
    end
    
    
    methods (Static)
        function pathList = getDependentPaths()
        %getDependentPaths Get dependent paths for this method.
        %
        %   Note: Dependent paths are necessary in order to create batch
        %   jobs, or run methods on a different worker.
        
            pathList = {};
        
            % Todo: return the nansen code directory.
            
        end
    end
    
    methods % Constructor
        function obj = DataMethod(varargin)
        %DataMethod Constructs an instance of the DataMethod class
        %
        %   obj = nansen.DataMethod(dataIoModel, options) creates the
        %   object with a data i/o model and a set of options
        %
        %   Inputs:
        %       dataIoModel : todo: define this, i.e it can be a struct, a DataIoModel, a Session object... It's confusing 
        %       options (struct) : A struct containing a set of options for the method

            if isempty(varargin)
                return
                % Todo: Assign default data io model...
            end
            
            % Todo: if input is a file/folder path, create a generic data
            % input/output model. 
            %obj@nansen.dataio.DataIoModel(varargin{1})
            obj.DataIoModel = varargin{1};

            if nargin >= 2
                obj.Options = varargin{2};
            end
            
        end
    end
    
    methods % Set/get
        
        function id = get.DataId(obj)
            if isempty(obj.DataIoModel)
                id = 'Name not available';
            elseif ischar(obj.DataIoModel)
                [~, id] = fileparts(obj.DataIoModel);
            else
                id = obj.DataIoModel.getDataId;
            end
        end
    end
    
    methods (Access = public) % Todo: Use methods of hasOptions superclass
        
        function wasSuccess = preview(obj) %_workinprogress(obj)
            %Todo: Combine this with methods that are already present in
            %some subclasses (motion correction / auto segmentation)
            
            [~, wasAborted] = obj.editOptions();
            wasSuccess = ~wasAborted;

            if wasSuccess
                obj.Parameters = obj.OptionsManager.Options;
            end
        end
        
        function wasSuccess = finishPreview(obj, hPreviewApp)
        %finishPreview For wrapping up preview if using a preview app...
        
            % Abort if h is invalid (improper exit)
            if ~isvalid(hPreviewApp); wasSuccess = false; return; end
            
            obj.Parameters = hPreviewApp.settings;
            obj.Options = hPreviewApp.settings;
            wasSuccess = ~hPreviewApp.wasAborted;
            
            delete(hPreviewApp)
        end
        
    end
    
    methods (Access = public) % Shortcuts for methods of DataIOModel
    %Todo: Get this from a superclass / mixin class.
    
        function data = loadData(obj, varargin)
            if ischar(obj.DataIoModel) && isfile(obj.DataIoModel)
                data = []; % skip loading
            else
                data = obj.DataIoModel.loadData(varargin{:});
            end
        end
        
        function saveData(obj, varargin)
            if ischar(obj.DataIoModel) && isfile(obj.DataIoModel)
                % Skip saving...
            else
                obj.DataIoModel.saveData(varargin{:})
            end
        end
        
        function filePath = getDataFilePath(obj, varargin)
            if ischar(obj.DataIoModel) && isfile(obj.DataIoModel)
                filePath = '';
                %warning('DataLocation Model is not set.')
            else
                filePath = obj.DataIoModel.getDataFilePath(varargin{:});
            end
        end
        
        function folder = getTargetFolder(obj)
            if isa(obj.DataIoModel, 'nansen.metadata.type.Session')
                folder = obj.DataIoModel.getSessionFolder(); % Todo: Generalize away from session data location...
            else
                error('Not implemented yet')
            end
        end
        
        function tf = existVariable(obj, varName)
            tf = isfile( obj.getDataFilePath(varName) );
        end
    end
    
    methods (Access = protected)
        
        function initializeVariables(obj)
        %initializeVariables Initialize variables that is created by method
            
            % The purpose of this method is to initialize variable in the
            % variable model for this method, so that they can be accessed
            % without using "attributes".
        
            % Get variable names from property
            varNames = obj.DataVariableNames;
            for i = 1:numel(varNames)
                obj.setVariable(varNames{i}, 'Subfolder', ...
                    obj.DATA_SUBFOLDER, 'IsInternal', true);
            end
            
            % Todos:
            % 1) Implement the DataVariableNames property
            % 2) Implement a DATA_SUBFOLDER abstract property
            % 3) Implement a setVariable on the DataIoModel / VariableModel
            
        end
        
    end
    
end